﻿@using SAPS_App.Context
@using SAPS_App.Services
@inject UserManager<IdentityUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject SAPS_Context _db
@inject ISAPSService service
@inject EmailSender emailSender
@inject IMessageService messageService
@implements IDisposable

<div class="container small-box">
    @* @if(messageService.IsFormDisplayed) *@
    @* { *@
        <div class="card">
        <div class="card-header heading-form">
            <p>
                Assign Role To User
            </p>
        </div>
        <div class="card-body">
            <EditForm Model="assignRoleModel" OnValidSubmit="AssignRole" FormName="assignRole">
                <DataAnnotationsValidator />
                <div class="form-floating mb-2">
                    <InputSelect @bind-Value="assignRoleModel.Email" class="form-control" aria-required="true" placeholder="email" id="email">
                        <option value="">Select Email</option>
                        @foreach (var email in Emails)
                        {
                            <option value="@email">@email</option>
                        }
                    </InputSelect>
                    <label for="Email">Email</label>
                    <ValidationMessage For ="() => assignRoleModel.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-2">
                    <InputSelect @bind-Value="assignRoleModel.Role" class="form-control" aria-required="true" placeholder="role" id="role">
                        <option value="">Select Role</option>
                        @foreach (var role in Roles)
                        {
                            <option value="@role">@role</option>
                        }
                    </InputSelect>
                    <label for="Role">Role</label>
                    <ValidationMessage For="() => assignRoleModel.Role" class="text-danger" />
                </div>
                <button class="btn btn-primary w-100" type="submit">
                    <i class="bi bi-plus-circle fs-6"></i> Assign Role
                </button>
            </EditForm>
        </div>
    </div>
    @* } *@
    @if (!string.IsNullOrEmpty(messageService.InfoMessage))
    {
        <div class="overlay-alert">
            <InfoMessage Message="@messageService.InfoMessage" IsDivDisplayed ="true"/>
        </div>
    }
    else if (!string.IsNullOrEmpty(messageService.SuccessMessage))
    {
        <div class="overlay-alert">
            <SuccessMessage Message="@messageService.SuccessMessage" IsDivDisplayed="true"/>
        </div>
    }
</div>

@code {
    private AssignRoleModel assignRoleModel = new();
    private List<string> Roles = new();
    private List<string> Emails = new();

    protected override async Task OnInitializedAsync()
    {
        Roles = await RoleManager.Roles.Select(x => x.Name ?? "").Distinct().ToListAsync();
        Emails = await UserManager.Users.Select(x => x.UserName ?? "").ToListAsync();
        messageService.Onchange += StateHasChanged;
    }

    private async Task AssignRole()
    {
        var role = assignRoleModel.Role;
        var user = await UserManager.FindByEmailAsync(assignRoleModel.Email ?? "");
        var appUser = await service.GetAplicationUserUserByUsernameAsync(user.UserName);
        if (user != null && !string.IsNullOrEmpty(assignRoleModel.Email))
        {
            if(!await UserManager.IsInRoleAsync(user, assignRoleModel.Role ?? ""))
            {
                var result = await UserManager.AddToRoleAsync(user, assignRoleModel.Role ?? "");
                if (result.Succeeded)
                {
                    messageService.Show("", "", $"'{assignRoleModel.Role}' has been added successfully to {user.UserName}.");
                    await messageService.HideAsync();
                    assignRoleModel = new AssignRoleModel();
                    //Add managers to Managers(Table I created myself)
                    if (role == "Case Manager")
                    {
                        var isExisting = await _db.Case_Managers.AnyAsync(x => x.CaseManagerId == user.Id);
                        var isActive = await _db.Case_Managers.AnyAsync(x => x.CaseManagerId == user.Id && x.IsActive == true);
                        if (!isExisting)
                        {//If case manager does not exist
                            var manager = appUser;
                            var caseManager = new CaseManager
                                {
                                    Name = manager.Name,
                                    Surname = manager.Surname,
                                    Email = manager.Email!,
                                    CaseManagerId = manager.Id,
                                };
                            _db.Case_Managers.Add(caseManager);
                            await _db.SaveChangesAsync();
                        }
                        else if (isExisting && !isActive)//If case manager is not active
                        {
                            var caseManager = await _db.Case_Managers.FirstOrDefaultAsync(x => x.CaseManagerId == user.Id);
                            if(caseManager != null)
                            {
                                caseManager.IsActive = true;
                                _db.Case_Managers.Update(caseManager);
                                await _db.SaveChangesAsync();
                            }

                        }
                    }
                    var body = $@"Good day {appUser.Name} {appUser.Surname}, <br><br>
                                   You have been given a new role called '{role}'.
                                   <br><br>
                                   Kind Regards,<br> SAPS Management Admin.";

                    await emailSender.SendEmailAsync(appUser.UserName!, "Role Assignment Notification", body);
                }
            }
            else
            {
                messageService.Show("", $"'{assignRoleModel.Role}' has already  been assigned  to {user.UserName}.","");
                await messageService.HideAsync();
            }

        }
    }

    public  void Dispose()
    {
        messageService.Onchange -= StateHasChanged;
    }
    public class AssignRoleModel
    {
        [Required(ErrorMessage ="Email is requred.")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Role is requred.")]
        public string? Role { get; set; }
    }
}