@inject UserManager<IdentityUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

<div class="row justify-content-center">
    <div class="col-md-6">
        <h6 class="text-center"><u>Assign Role To User</u></h6>
        <EditForm Model="assinRoleModel" OnValidSubmit="AssignRole" FormName="assignRole">
            <DataAnnotationsValidator />
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="assinRoleModel.Email" class="form-control" aria-required="true" placeholder="email" id="email" @onchange="ClearMessages">
                    <option value="">Select Email</option>
                    @foreach (var email in Emails)
                    {
                        <option value="@email">@email</option>
                    }
                </InputSelect>
                <label for="Email">Email</label>
                <ValidationMessage For ="() => assinRoleModel.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="assinRoleModel.Role" class="form-control" aria-required="true" placeholder="role" id="role" @onchange = "ClearMessages">
                    <option value="">Select Role</option>
                    @foreach (var role in Roles)
                    {
                        <option value="@role">@role</option>
                    }
                </InputSelect>
                <label for="Role">Role</label>
                <ValidationMessage For="() => assinRoleModel.Role" class="text-danger" />
            </div>
            <button class="btn btn-primary w-100" type="submit">
                <i class="bi bi-plus-circle"></i> Assign Role
            </button>
        </EditForm>
        @if (!string.IsNullOrEmpty(InfoMessage) && IsFormSubmitted)
        {
            <div class="fade-message w-100" id="info-div">
                <InfoMessage Message="@InfoMessage" IsDivDisplayed ="true"/>
            </div>
        }
        else if (!string.IsNullOrEmpty(SuccessMessage) && IsFormSubmitted)
        {
            <div class="fade-message w-100" id="success-div">
                <SuccessMessage Message="@SuccessMessage" IsDivDisplayed="true"/>
            </div>
        }
    </div>
</div>
@code {
    private AssinRoleModel assinRoleModel = new();
    private List<string> Roles = new();
    private List<string> Emails = new();
    private string? ErrorMessage { get; set; }
    private string? SuccessMessage { get; set; }
    private string? InfoMessage { get; set; }
    private bool IsFormSubmitted = false;

    protected override async Task OnInitializedAsync()
    {
        Roles = await RoleManager.Roles.Select(x => x.Name ?? "").Distinct().ToListAsync();
        Emails = await UserManager.Users.Select(x => x.UserName ?? "").ToListAsync();
    }

    private async Task AssignRole()
    {
        IsFormSubmitted = true;
        var user = await UserManager.FindByEmailAsync(assinRoleModel.Email ?? "");
        if (user != null && !string.IsNullOrEmpty(assinRoleModel.Email))
        {
            if(!await UserManager.IsInRoleAsync(user, assinRoleModel.Role ?? ""))
            {
                var result = await UserManager.AddToRoleAsync(user, assinRoleModel.Role ?? "");
                if (result.Succeeded)
                {
                    SuccessMessage = $"'{assinRoleModel.Role}' has been added successfully to {user.UserName}.";
                    InfoMessage = "";
                    assinRoleModel = new AssinRoleModel();

                }
            }
            else
            {
                InfoMessage = $"'{assinRoleModel.Role}' has already  been assigned  to {user.UserName}.";
                SuccessMessage = "";
            }

        }

    }

    private void ClearMessages()
    {
        InfoMessage = string.Empty;
        SuccessMessage = string.Empty;
    }
    // [Inject]
    // private UserManager<ApplicationUser>? UserManager { get; set; }

    // [Inject]
    // private RoleManager<IdentityRole>? RoleManager { get; set; }

    public class AssinRoleModel
    {
        [Required(ErrorMessage ="Email is requred.")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Role is requred.")]
        public string? Role { get; set; }
    }
}
