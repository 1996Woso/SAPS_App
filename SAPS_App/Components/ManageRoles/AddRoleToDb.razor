@using SAPS_App.Services
@inject RoleManager<IdentityRole> RoleManager
@inject IJSRuntime IJSRuntime
@inject IMessageService messageService
@implements IDisposable
<div class="container small-box">
    @if(messageService.IsFormDisplayed)
    {
        <div class="card">
            <div class="card-header heading-form">
                <p>
                    Add Role To Batabase
                </p>
            </div>
            <div class="card-body">
                <EditForm Model="@Role" OnValidSubmit="AddRole" FormName="addRoleToDb">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="input-group">
                        <InputText @bind-Value="Role.Name" class="form-control" placeholder="Role Name"/>
                        <ValidationMessage For="() => Role.Name" class="text-danger" />
                        <button type="submit" class="btn btn-outline-primary">
                            <i class="bi bi-plus-circle fs-6"> Add Role</i>
                        </button>
                    </div>
                </EditForm>

            </div>
        </div>
    }
    @if (!string.IsNullOrEmpty(messageService.ErrorMessage))
    {
        <div class="fade-message w-100" id="error-div">
            <ErrorMessage Message="@messageService.ErrorMessage" IsDivDisplayed="true" />
        </div>
        @*  return; *@
    }
    else if (!string.IsNullOrEmpty(messageService.SuccessMessage))
    {
        <div class="fade-message w-100" id="success-div">
            <SuccessMessage Message="@messageService.SuccessMessage" IsDivDisplayed="true" />
        </div>
        @*           return; *@
    }
    else if (!string.IsNullOrEmpty(messageService.InfoMessage))
    {
        <div class="fade-message w-100" id="info-div">
            <InfoMessage Message="@messageService.InfoMessage" IsDivDisplayed="true" />
        </div>
        @*     return; *@
    }
</div>

@code {
    private IdentityRole? Role = new IdentityRole();

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (!string.IsNullOrEmpty(ErrorMessage) || !string.IsNullOrEmpty(SuccessMessage) || !string.IsNullOrEmpty(InfoMessage))
    //     {
    //         await IJSRuntime.InvokeVoidAsync("initializeTimeouts");
    //         IsFormSubmitted = false;
    //     }
    // }
    protected override async Task OnInitializedAsync()
    {
        messageService.Onchange += StateHasChanged;
    }
    private async Task AddRole()
    {
        // Ensure Name is bound properly
        if (Role == null || string.IsNullOrEmpty(Role.Name))
        {
            messageService.Show("", "Role name cannot be empty.", "");
            await messageService.HideAsync();
            return;
        }

        // Check if Role already exists
        if (!await RoleManager.RoleExistsAsync(Role.Name))
        {
            var identityRole = new IdentityRole(Role.Name);

            var result = await RoleManager.CreateAsync(identityRole);

            if (result.Succeeded)
            {
                messageService.Show("", "", $"Role '{Role.Name}' added successfully.");
                await messageService.HideAsync();
                Role = new IdentityRole(); // Reset form
            }
            else
            {
                messageService.Show("Error adding Role: " + string.Join(", ", result.Errors.Select(e => e.Description)), "", "");
                await messageService.HideAsync();
            }
        }
        else
        {
            messageService.Show("",$"Role '{Role.Name}' already exists.", "");
            await messageService.HideAsync();
        }
    }

    public void Dispose()
    {
        messageService.Onchange -= StateHasChanged;
    }
}
<script>
    function initializeTimeouts() {
        const errorDiv = document.getElementById('error-div');
        const successDiv = document.getElementById('success-div');
        const infoDiv = document.getElementById('info-div');
        if (errorDiv) {
            errorDiv.classList.remove('fade-out');
            errorDiv.style.display = 'block';
            setTimeout(() => {
                errorDiv.classList.add('fade-out');
                setTimeout(() => {
                    errorDiv.style.display = 'none';
                }, 2500);
            }, 2500);
        }

        if (successDiv) {
            successDiv.classList.remove('fade-out');
            successDiv.style.display = 'block';
            setTimeout(() => {
                successDiv.classList.add('fade-out');
                setTimeout(() => {
                    successDiv.style.display = 'none';
                }, 2500);
            }, 2500);
        }

        if (infoDiv) {
            infoDiv.classList.remove('fade-out');
            infoDiv.style.display = 'block';
            setTimeout(() => {
                infoDiv.classList.add('fade-out');
                setTimeout(() => {
                    infoDiv.style.display = 'none';
                }, 2500);
            }, 2500);
        }
    }
</script>