﻿@using SAPS_App.Context
@using SAPS_App.Services
@inject UserManager<IdentityUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject SAPS_Context _db
@inject EmailSender emailSender
@inject ISAPSService sapsService
@inject IMessageService messageService
@implements IDisposable

<div class="container small-box">
    @if(messageService.IsFormDisplayed)
    {
        <div class="card">
            <div class="card-header heading-form">
                <p>
                    Remove Role From User
                </p>
            </div>
            <div class="card-body">
                <EditForm Model="model" OnValidSubmit="RemoveRole" FormName="removeRole">
                    <DataAnnotationsValidator />
                    <div class="form-floating mb-2">
                        <InputSelect @bind-Value="model.Email" class="form-control" aria-required="true" placeholder="email">
                            <option value="">Select Email</option>
                            @foreach (var email in Emails)
                            {
                                <option value="@email">@email</option>
                            }
                        </InputSelect>
                        <label for="Email">Email</label>
                        <ValidationMessage For="() => model.Email" class="text-danger" />
                    </div>
                    <div class="form-floating mb-2">
                        <InputSelect @bind-Value="model.Role" class="form-control" aria-required="true" placeholder="role">
                            <option value="">Select Role</option>
                            @foreach (var role in Roles)
                            {
                                <option value="@role">@role</option>
                            }
                        </InputSelect>
                        <label for="Role">Role</label>
                        <ValidationMessage For="() => model.Role" class="text-danger" />
                    </div>
                    <button class="btn btn-danger w-100" type="submit">
                        <i class="bi bi-x-circle fs-6"></i> Remove Role
                    </button>
                </EditForm>
            </div>
        </div>
    }
    @if (!string.IsNullOrEmpty(messageService.ErrorMessage))
    {
        <div class="fade-message w-100" id="error-div">
            <ErrorMessage Message="@messageService.ErrorMessage" IsDivDisplayed ="true"/>
        </div>
    }
    else if (!string.IsNullOrEmpty(messageService.SuccessMessage))
    {
        <div class="fade-message w-100" id="success-div">
            <SuccessMessage Message="@messageService.SuccessMessage" IsDivDisplayed ="true"/>
        </div>
    }
    else if (!string.IsNullOrEmpty(messageService.InfoMessage))
    {
        <div class="fade-message w-100" id="info-div">
            <InfoMessage Message="@messageService.InfoMessage" IsDivDisplayed ="true"/>
        </div>
    }
</div>

@code {
    private RemoveRoleModel model = new();
    private IdentityUser? User;
    private List<string> Roles = new();
    private List<string> Emails = new();


    protected override async Task OnInitializedAsync()
    {
        if(User != null)
        {
            Roles = (await UserManager.GetRolesAsync(User)).ToList();
        }
        else
        {
            Roles = await RoleManager.Roles.Select(x => x.Name ?? "").ToListAsync();
        }
        Emails = await UserManager.Users.Select(x => x.UserName ?? "").ToListAsync();

        messageService.Onchange += StateHasChanged;
    }

    private async Task RemoveRole()
    {
        User = await UserManager.FindByEmailAsync(model.Email ?? "");
        var appUser = await sapsService.GetAplicationUserUserByUsernameAsync(User.UserName);
        var role = model.Role;

        if (!await UserManager.IsInRoleAsync(User, model.Role))
        {
            messageService.Show("", $"'{User!.UserName}' is not in role '{model.Role}'.", "");
            await messageService.HideAsync();
            return;
        }
        if(User != null && !string.IsNullOrEmpty(model.Role))
        {

            var result = await UserManager.RemoveFromRoleAsync(User, model.Role);
            if (result.Succeeded)
            { 
                if(model.Role == "Case Manager")
                {
                    var caseManager = await _db.Case_Managers.FirstOrDefaultAsync(x => x.CaseManagerId == User.Id);
                    if (caseManager != null)
                    {
                        caseManager.IsActive = false;
                        _db.Case_Managers.Update(caseManager);
                        await _db.SaveChangesAsync();
                    }
                }
                var body = $@"Good day {appUser.Name} {appUser.Surname}, <br><br>
                                   Your role '{model.Role}' has been removed.
                                   <br><br>
                                   Kind Regards,<br> SAPS Management Admin.";
                await emailSender.SendEmailAsync(appUser.UserName!, "Role Removal Notification", body);
                messageService.Show("", "", $"'{model.Role}' has been removed successfully from {User.UserName}.");
                await messageService.HideAsync();
                return;
            }
            else
            {
                messageService.Show($"'{model.Role}' has been removed successfully from {User.UserName}.", "", "");
                await messageService.HideAsync();
                return;
            }  
        }
    }

    public void Dispose()
    {
        messageService.Onchange -= StateHasChanged;
    }
    public class RemoveRoleModel
    {
        [Required(ErrorMessage = "Email is requred.")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Role is requred.")]
        public string? Role { get; set; }
    }
}